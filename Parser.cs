/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/

using System;

namespace Program {



public class Parser {
	public const int _EOF = 0;
	public const int _name_ = 1;
	public const int _unsignedInteger = 2;
	public const int _realNumber = 3;
	public const int _stringg = 4;
	public const int maxT = 55;

	const bool T = true;
	const bool x = false;
	const int minErrDist = 2;
	
	public Scanner scanner;
	public Errors  errors;

	public Token t;    // last recognized token
	public Token la;   // lookahead token
	int errDist = minErrDist;

const int 
	  undef_ = 0, int_ = 1, bool_ = 2, byte_ = 3,  double_ = 5, string_=6, label_=7, 
	  SetOfint = 8, SetOfbool = 9, SetOfbyte = 10, SetOfdouble = 12, SetOfstring = 13;
	const int 
	  var_ = 0, proc_ = 1, const_ = 3; 
	public SymbolTable   tab;
	public CodeGenerator gen;
	public bool gotoJumpWas;
	bool LabelOperation() {
	 Token next = scanner.Peek();
	 return next.val == ":";
	} 
	
/*------------------------------------------------------------------------------------------------------------------*/


	public Parser(Scanner scanner) {
		this.scanner = scanner;
		errors = new Errors();
	}

	void SynErr (int n) {
		if (errDist >= minErrDist) errors.SynErr(la.line, la.col, n);
		errDist = 0;
	}

	public void SemErr (string msg) {
		if (errDist >= minErrDist) errors.SemErr(t.line, t.col, msg);
		errDist = 0;
	}
	
	void Get () {
		for (;;) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) { ++errDist; break; }

			la = t;
		}
	}
	
	void Expect (int n) {
		if (la.kind==n) Get(); else { SynErr(n); }
	}
	
	bool StartOf (int s) {
		return set[s, la.kind];
	}
	
	void ExpectWeak (int n, int follow) {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}


	bool WeakSeparator(int n, int syFol, int repFol) {
		int kind = la.kind;
		if (kind == n) {Get(); return true;}
		else if (StartOf(repFol)) {return false;}
		else {
			SynErr(n);
			while (!(set[syFol, kind] || set[repFol, kind] || set[0, kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}

	
	void SET() {
		string name; 
		Expect(5);
		Name(out name);
		tab.OpenScope(); 
		Expect(6);
		if (la.kind == 8) {
			LabelSection();
		}
		if (la.kind == 11) {
			ConstantSection();
		}
		VariablesSection();
		OperatorsSection();
		Expect(7);
		tab.CloseScope();
		if (tab.operSum == -1) SemErr("No executed operators in the program :)");
		
	}

	void Name(out string name) {
		Expect(1);
		name = t.val; 
	}

	void LabelSection() {
		string name; int type=label_; 
		Expect(8);
		Name(out name);
		tab.NewObj(name, var_, type); 
		while (la.kind == 9) {
			Get();
			Name(out name);
			tab.NewObj(name, var_, type); 
		}
		Expect(10);
	}

	void ConstantSection() {
		Expect(11);
		ConstantsDefinition();
		Expect(10);
		while (StartOf(1)) {
			ConstantsDefinition();
			Expect(10);
		}
	}

	void VariablesSection() {
		Expect(17);
		VariablesDeclaration();
		Expect(10);
		while (StartOf(1)) {
			VariablesDeclaration();
			Expect(10);
		}
	}

	void OperatorsSection() {
		CompositeOperator();
	}

	void ConstantsDefinition() {
		string name; int type; 
		type=undef_; 
		Type(out type);
		if (type>7) SemErr("Set can't be a constant"); 
		Name(out name);
		tab.NewObj(name, const_, type); 
		Expect(12);
		Constant();
	}

	void Type(out int type) {
		type = undef_; 
		if (StartOf(2)) {
			SimpleType(out type);
		} else if (la.kind == 23) {
			SubjectType(out type);
		} else SynErr(56);
	}

	void Constant() {
		string name; Op op; 
		if (StartOf(3)) {
			if (la.kind == 15 || la.kind == 16) {
				Sign(out op);
			}
			if (la.kind == 2 || la.kind == 3) {
				NumberWithoutSign();
			} else if (la.kind == 1) {
				Name(out name);
			} else SynErr(57);
		} else if (la.kind == 4) {
			Get();
		} else if (la.kind == 13 || la.kind == 14) {
			LogicalConst();
		} else SynErr(58);
	}

	void Sign(out Op op) {
		op = Op.ERR; 
		if (la.kind == 15) {
			Get();
			op = Op.ADD; 
		} else if (la.kind == 16) {
			Get();
			op = Op.SUB; 
		} else SynErr(59);
	}

	void NumberWithoutSign() {
		if (la.kind == 2) {
			Get();
		} else if (la.kind == 3) {
			Get();
		} else SynErr(60);
	}

	void LogicalConst() {
		if (la.kind == 13) {
			Get();
		} else if (la.kind == 14) {
			Get();
		} else SynErr(61);
	}

	void VariablesDeclaration() {
		string name; int type; 
		Type(out type);
		Name(out name);
		tab.NewObj(name, var_, type);  
		while (la.kind == 9) {
			Get();
			Name(out name);
			tab.NewObj(name, var_, type); 
		}
	}

	void SimpleType(out int type) {
		type = undef_; 
		if (la.kind == 18) {
			Get();
			type = int_; 
		} else if (la.kind == 19) {
			Get();
			type = byte_; 
		} else if (la.kind == 20) {
			Get();
			type = double_; 
		} else if (la.kind == 21) {
			Get();
			type = bool_; 
		} else if (la.kind == 22) {
			Get();
			type = string_; 
		} else SynErr(62);
	}

	void SubjectType(out int type) {
		type = undef_; 
		Expect(23);
		Expect(24);
		if (la.kind == 2) {
			ContinuousSet(out type);
		} else if (StartOf(2)) {
			EnumeratedSet(out type);
		} else SynErr(63);
	}

	void ContinuousSet(out int type) {
		Expect(2);
		Expect(25);
		Expect(2);
		type = SetOfint; 
	}

	void EnumeratedSet(out int type) {
		SimpleType(out type);
		if (type == int_) type = SetOfint;
		else if (type == byte_) type = SetOfbyte;
		else if (type == double_) type = SetOfdouble;
		else if (type == bool_) type = SetOfbool;
		else if (type == string_) type = SetOfstring;  
	}

	void CompositeOperator() {
		Expect(26);
		while (StartOf(4)) {
			Operator();
			tab.operSum++;
		}
		Expect(27);
		Expect(10);
	}

	void Operator() {
		if (LabelOperation()) {
			Metka();
		}
		UnlabeledOperator();
			if (gotoJumpWas) gotoJumpWas=false; else Expect(10); 
	}

	void Metka() {
		string name; Obj obj; 
		Name(out name);
		Expect(28);
		obj = tab.Find(name); 
		if (obj!=null) tab.NewLabel(name, t); 
	}

	void UnlabeledOperator() {
		if (StartOf(5)) {
			SimpleOperator();
		} else if (la.kind == 26 || la.kind == 50 || la.kind == 53) {
			ComplicatedOperator();
		} else SynErr(64);
	}

	void SimpleOperator() {
		if (la.kind == 1) {
			AssignmentsOperator();
		} else if (la.kind == 43) {
			JumpOperator();
		} else if (StartOf(6)) {
			InOutOperator();
		} else SynErr(65);
	}

	void ComplicatedOperator() {
		if (la.kind == 26) {
			CompositeOperator();
		} else if (la.kind == 50) {
			ConditionalOperator();
		} else if (la.kind == 53) {
			CycleOperator();
		} else SynErr(66);
	}

	void AssignmentsOperator() {
		int type1; string name; Obj obj; int adr; Object value1; 
		VariableName(out name);
		if (name=="goto") SemErr("'goto' should write like 'GOTO' ");
		obj = tab.Find(name); 
		if (obj.kind == const_) SemErr("Assignment to a constant"); 
		Expect(12);
		Expression(out type1,out value1);
		if (type1 != obj.type) SemErr("Incompatible types!");
		else obj.value = value1;  
	}

	void JumpOperator() {
		string name; Token tok; 
		Expect(43);
		Name(out name);
		tok = tab.gotoRealization(name);
		if (tok != null) {
		la=tok;
		gotoJumpWas = true;
		}  
	}

	void InOutOperator() {
		if (la.kind == 44 || la.kind == 45) {
			InOperator();
		} else if (la.kind == 48 || la.kind == 49) {
			OutOperator();
		} else SynErr(67);
	}

	void ConditionalOperator() {
		int type; int adr, adr2, loopstart; Object value; 
		Expect(50);
		Expect(46);
		Expression(out type, out value);
		Expect(47);
		if (type != bool_) SemErr("bool type expected in IF construction");  
		Expect(51);
		while (StartOf(4)) {
			if ((type != bool_)||(!Convert.ToBoolean(value))) break;
			Operator();
		}
		if (la.kind == 52) {
			Get();
			while (StartOf(4)) {
				if (Convert.ToBoolean(value)) break; 
				Operator();
			}
		}
	}

	void CycleOperator() {
		int type; int adr, loopstart; Object value; 
		Expect(53);
		loopstart = gen.pc; 
		Expect(46);
		Expression(out type, out value);
		Expect(47);
		if (type != bool_) SemErr("boolean type expected");
		gen.Emit(Op.FJMP, 0); adr = gen.pc - 2; 
		Expect(54);
		Operator();
		gen.Emit(Op.JMP, loopstart); gen.Patch(adr, gen.pc); 
	}

	void VariableName(out string name) {
		Name(out name);
	}

	void Expression(out int type, out Object value) {
		int type1, type2; Op op; Object value1, value2; 
		value=0; type = bool_;     
		Exp0(out type1, out value1);
		value=value1; type=type1;  
		while (la.kind == 37 || la.kind == 38) {
			LogicSign(out op);
			Exp0(out type2, out value2);
			if ((type1 == label_)||(type2 == label_)) SemErr("Labels can not be compared");
			if ((type1!=bool_)||(type2 != bool_)) SemErr("This is no bool type variable..");
			else value = tab.Oper(type1, type2,value1,value2,op); type=bool_;
			
		}
	}

	void Exp0(out int type, out Object value) {
		int type1, type2; Op op; Object value1, value2; 
		value=0; type = bool_;     
		Exp1(out type1, out value1);
		value=value1;type=type1;  
		while (StartOf(7)) {
			RatioSign(out op);
			Exp1(out type2, out value2);
			if (type1 != type2) SemErr("Type1 != Type2");
			if ((type1 == label_)||(type2 == label_)) SemErr("Labels can not be compared");
			if (!((op == Op.EQU)||(op == Op.NEQU))) {
			if ((type1==bool_)||(type2==bool_)||(type1==string_)||(type2==string_)
			||(type1>7)||(type2>7)) SemErr("Incompatible types");
			}
			value = tab.Oper(type1, type2,value1,value2,op); type=bool_;
			
		}
	}

	void LogicSign(out Op op) {
		op = Op.ERR; 
		if (la.kind == 37) {
			Get();
			op = Op.AND; 
		} else if (la.kind == 38) {
			Get();
			op = Op.OR; 
		} else SynErr(68);
	}

	void Exp1(out int type, out Object value) {
		int type1, type2; Op op; Object value1, value2; 
		value=0; type = 0; value1=0; type1 = 0;  
		Exp2(out type1, out value1);
		value=value1;type=type1;
		while (la.kind == 15 || la.kind == 16) {
			Sign(out op);
			Exp2(out type2, out value2);
			if (type1 == bool_ || type2 == bool_ || type1 == string_ 
			|| type2 == string_ || type1>6 || type2>6) SemErr("Type expected");
			else {
			if ((type1==double_)||(type2==double_)) type=double_;
			else if ((type1==int_)||(type2==int_)) type=int_;
			else type=byte_;
			value = tab.Oper(type1, type2,value1,value2,op);
			}
			
		}
	}

	void RatioSign(out Op op) {
		op = Op.ERR; 
		switch (la.kind) {
		case 31: {
			Get();
			op = Op.EQU; 
			break;
		}
		case 32: {
			Get();
			op = Op.NEQU; 
			break;
		}
		case 33: {
			Get();
			op = Op.LSS; 
			break;
		}
		case 34: {
			Get();
			op = Op.GTR; 
			break;
		}
		case 35: {
			Get();
			op = Op.LEQ; 
			break;
		}
		case 36: {
			Get();
			op = Op.GEQ; 
			break;
		}
		default: SynErr(69); break;
		}
	}

	void Exp2(out int type, out Object value) {
		int type1,type2; Op op; Object value1, value2; 
		value = 0; type = 0; 
		Operand(out type1, out value1);
		value=value1;type=type1;  
		while (StartOf(8)) {
			if (la.kind == 29 || la.kind == 30) {
				MultiSign(out op);
			} else {
				VarietyOperation(out op);
			}
			Operand(out type2, out value2);
			if (type1 == bool_ || type2 == bool_ || type1 == string_ 
			|| type2 == string_ || type1>6 || type2>6) SemErr("Type expected");
			else {
			if(op==Op.MUL){
			if ((type1==double_)||(type2==double_)) type=double_;
			else type=int_;
			}
			else if (op==Op.DIV) {
			type = double_;
			}
			
			value = tab.Oper(type1, type2,value1,value2,op);}
			
		}
	}

	void Operand(out int type, out Object value) {
		Obj obj; string name; Op op; int type1; Object value1;
		type = undef_;  value =0.0; int minus = 0;
		if (StartOf(9)) {
			if (la.kind == 16) {
				Get();
				minus=1; 
			}
			if (la.kind == 1) {
				Name(out name);
				obj = tab.Find(name); type = obj.type;
				if (obj.kind != proc_) {
				if (obj.value != null) {
				if (minus==0) value = obj.value;
				else if (minus==1) value = tab.Oper(obj.type, obj.type, 0, obj.value, Op.SUB);}
				else SemErr("Variable value = null");
				} else SemErr("Variable expected"); 
			} else if (la.kind == 2) {
				Get();
				type = int_; if (minus==0) value = Convert.ToInt32(t.val); else value = -Convert.ToInt32(t.val); 
			} else if (la.kind == 3) {
				Get();
				type = double_; if (minus==0) value = Double.Parse(t.val, System.Globalization.CultureInfo.InvariantCulture.NumberFormat);  
				else value = - Double.Parse(t.val, System.Globalization.CultureInfo.InvariantCulture.NumberFormat); 
			} else SynErr(70);
		} else if (la.kind == 4) {
			Get();
			type = string_; value = t.val; 
		} else if (la.kind == 13 || la.kind == 14) {
			LogicalConst();
			type = bool_; value = Convert.ToBoolean(t.val); 
		} else if (la.kind == 6) {
			Variety(out type1, out value1);
			type = type1; value = value1; 
		} else SynErr(71);
	}

	void MultiSign(out Op op) {
		op = Op.ERR; 
		if (la.kind == 29) {
			Get();
			op = Op.MUL; 
		} else if (la.kind == 30) {
			Get();
			op = Op.DIV; 
		} else SynErr(72);
	}

	void VarietyOperation(out Op op) {
		op = Op.ERR; 
		if (la.kind == 39) {
			Get();
			op = Op.UNION; 
		} else if (la.kind == 40) {
			Get();
			op = Op.CROS; 
		} else if (la.kind == 41) {
			Get();
			op = Op.RES; 
		} else if (la.kind == 42) {
			Get();
			op = Op.DIFF; 
		} else SynErr(73);
	}

	void Variety(out int type, out Object value) {
		Obj obj; string name; Op op; int type1, type2; 
		Object value1, value2; type = undef_; value =0; 
		Expect(6);
		ElementValue(out type1, out value1);
		if (type1 == int_) type = SetOfint;
		else if (type1 == byte_) type = SetOfbyte;
		else if (type1 == double_) type = SetOfdouble;
		else if (type1 == bool_) type = SetOfbool;
		else if (type1 == string_) type = SetOfstring;  
		// ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ ÑÐ»ÐµÐ¼ÐµÐ½Ñ Ð² Value=...    
		
		while (la.kind == 9) {
			Get();
			ElementValue(out type2, out value2);
			if (type1 != type2) SemErr("Different types of elements in the set!"); 
			else {
			// ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ ÑÐ»ÐµÐ¼ÐµÐ½Ñ Ð² Value
			}
		}
		Expect(7);
	}

	void ElementValue(out int type, out Object value) {
		Obj obj; string name; Op op; type=undef_; value=0; op=Op.ADD; 
		if (StartOf(3)) {
			if (la.kind == 15 || la.kind == 16) {
				Sign(out op);
			}
			if (la.kind == 2) {
				Get();
				type = int_; 
				if (op==Op.SUB) value = - Convert.ToInt32(t.val); 
				else value = Convert.ToInt32(t.val); 
			} else if (la.kind == 3) {
				Get();
				type = double_;
				if (op==Op.SUB) value = - Double.Parse(t.val, System.Globalization.CultureInfo.InvariantCulture.NumberFormat); 
				else value = Double.Parse(t.val, System.Globalization.CultureInfo.InvariantCulture.NumberFormat); 
			} else if (la.kind == 1) {
				Name(out name);
				obj = tab.Find(name); type = obj.type;
				if (obj.kind != proc_) {
				if (obj.value != null) {
				if ((op==Op.SUB)&&((type==int_)||(type==byte_)||(type==double_))) 
				value = tab.Oper(obj.type, obj.type, 0, obj.value, Op.SUB); else value = obj.value;}
				else SemErr("Variable value = null. Element in the set can't=null ");
				} else SemErr("Variable expected"); 
			} else SynErr(74);
		} else if (la.kind == 4) {
			Get();
			type = string_; value = t.val; 
		} else if (la.kind == 13 || la.kind == 14) {
			LogicalConst();
			type = bool_; value = Convert.ToBoolean(t.val); 
		} else SynErr(75);
	}

	void InOperator() {
		if (la.kind == 44) {
			Get();
		} else if (la.kind == 45) {
			Get();
		} else SynErr(76);
		Expect(46);
		VariablesList();
		Expect(47);
	}

	void OutOperator() {
		Obj obj; Object val=null; string str; int type; Object value; int w; w=0; str="";
		if (la.kind == 48) {
			Get();
			w=0;
		} else if (la.kind == 49) {
			Get();
			w=1;
		} else SynErr(77);
		Expect(46);
		if (la.kind == 4) {
			Get();
			str = t.val; str = str.Substring(1, str.Length - 2); 
		} else if (StartOf(10)) {
			Expression(out type, out value);
			val=value; 
		} else SynErr(78);
		if (val!=null) Console.Write(val); else Console.Write(str); 
		while (la.kind == 9) {
			Get();
			if (la.kind == 4) {
				Get();
				str = t.val; str = str.Substring(1, str.Length - 2); 
			} else if (StartOf(10)) {
				Expression(out type, out value);
				val=value;
			} else SynErr(79);
			if (val!=null) {Console.Write(val); val=null; }
			else Console.Write(str); 
		}
		Expect(47);
		if (w!=0) Console.WriteLine(" "); 
	}

	void VariablesList() {
		Obj obj; string name; 
		VariableName(out name);
		obj = tab.Find(name);
		gen.Emit(Op.READ);
		if (obj.level == 0) gen.Emit(Op.STOG, obj.adr);
		else gen.Emit(Op.STO, obj.adr); 
		while (la.kind == 9) {
			Get();
			VariableName(out name);
			obj = tab.Find(name);
			gen.Emit(Op.READ);
			if (obj.level == 0) gen.Emit(Op.STOG, obj.adr);
			else gen.Emit(Op.STO, obj.adr); 
		}
	}



	public void Parse() {
		la = new Token();
		la.val = "";		
		Get();
		SET();
		Expect(0);

	}
	
	static readonly bool[,] set = {
		{T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,T, T,T,T,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,T, T,T,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,T,T,T, x,x,x,x, x,x,x,x, x,x,x,T, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, T,T,x,x, T,T,T,x, x,T,x,x, x},
		{x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, T,T,x,x, T,T,x,x, x,x,x,x, x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,T,x,x, T,T,x,x, x,x,x,x, x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, T,T,T,T, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,T,x, x,x,x,x, x,x,x,T, T,T,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,T,T,T, x,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,T,T,T, T,x,T,x, x,x,x,x, x,T,T,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x}

	};
} // end Parser


public class Errors {
	public int count = 0;                                    // number of errors detected
	public System.IO.TextWriter errorStream = Console.Out;   // error messages go to this stream
	public string errMsgFormat = "-- line {0} col {1}: {2}"; // 0=line, 1=column, 2=text

	public virtual void SynErr (int line, int col, int n) {
		string s;
		switch (n) {
			case 0: s = "EOF expected"; break;
			case 1: s = "name_ expected"; break;
			case 2: s = "unsignedInteger expected"; break;
			case 3: s = "realNumber expected"; break;
			case 4: s = "stringg expected"; break;
			case 5: s = "\"PROGRAM\" expected"; break;
			case 6: s = "\"{\" expected"; break;
			case 7: s = "\"}\" expected"; break;
			case 8: s = "\"LABEL\" expected"; break;
			case 9: s = "\",\" expected"; break;
			case 10: s = "\";\" expected"; break;
			case 11: s = "\"CONST\" expected"; break;
			case 12: s = "\"=\" expected"; break;
			case 13: s = "\"TRUE\" expected"; break;
			case 14: s = "\"FALSE\" expected"; break;
			case 15: s = "\"+\" expected"; break;
			case 16: s = "\"-\" expected"; break;
			case 17: s = "\"VAR\" expected"; break;
			case 18: s = "\"int\" expected"; break;
			case 19: s = "\"byte\" expected"; break;
			case 20: s = "\"double\" expected"; break;
			case 21: s = "\"bool\" expected"; break;
			case 22: s = "\"string\" expected"; break;
			case 23: s = "\"Set\" expected"; break;
			case 24: s = "\"Of\" expected"; break;
			case 25: s = "\"..\" expected"; break;
			case 26: s = "\"BEGIN\" expected"; break;
			case 27: s = "\"END\" expected"; break;
			case 28: s = "\":\" expected"; break;
			case 29: s = "\"*\" expected"; break;
			case 30: s = "\"/\" expected"; break;
			case 31: s = "\"==\" expected"; break;
			case 32: s = "\"!=\" expected"; break;
			case 33: s = "\"<\" expected"; break;
			case 34: s = "\">\" expected"; break;
			case 35: s = "\"<=\" expected"; break;
			case 36: s = "\">=\" expected"; break;
			case 37: s = "\"AND\" expected"; break;
			case 38: s = "\"OR\" expected"; break;
			case 39: s = "\"Union\" expected"; break;
			case 40: s = "\"Cros\" expected"; break;
			case 41: s = "\"Res\" expected"; break;
			case 42: s = "\"Diff\" expected"; break;
			case 43: s = "\"GOTO\" expected"; break;
			case 44: s = "\"Read\" expected"; break;
			case 45: s = "\"Readln\" expected"; break;
			case 46: s = "\"(\" expected"; break;
			case 47: s = "\")\" expected"; break;
			case 48: s = "\"Write\" expected"; break;
			case 49: s = "\"Writeln\" expected"; break;
			case 50: s = "\"IF\" expected"; break;
			case 51: s = "\"THEN\" expected"; break;
			case 52: s = "\"ELSE\" expected"; break;
			case 53: s = "\"WHILE\" expected"; break;
			case 54: s = "\"DO\" expected"; break;
			case 55: s = "??? expected"; break;
			case 56: s = "invalid Type"; break;
			case 57: s = "invalid Constant"; break;
			case 58: s = "invalid Constant"; break;
			case 59: s = "invalid Sign"; break;
			case 60: s = "invalid NumberWithoutSign"; break;
			case 61: s = "invalid LogicalConst"; break;
			case 62: s = "invalid SimpleType"; break;
			case 63: s = "invalid SubjectType"; break;
			case 64: s = "invalid UnlabeledOperator"; break;
			case 65: s = "invalid SimpleOperator"; break;
			case 66: s = "invalid ComplicatedOperator"; break;
			case 67: s = "invalid InOutOperator"; break;
			case 68: s = "invalid LogicSign"; break;
			case 69: s = "invalid RatioSign"; break;
			case 70: s = "invalid Operand"; break;
			case 71: s = "invalid Operand"; break;
			case 72: s = "invalid MultiSign"; break;
			case 73: s = "invalid VarietyOperation"; break;
			case 74: s = "invalid ElementValue"; break;
			case 75: s = "invalid ElementValue"; break;
			case 76: s = "invalid InOperator"; break;
			case 77: s = "invalid OutOperator"; break;
			case 78: s = "invalid OutOperator"; break;
			case 79: s = "invalid OutOperator"; break;

			default: s = "error " + n; break;
		}
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}

	public virtual void SemErr (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}
	
	public virtual void SemErr (string s) {
		errorStream.WriteLine(s);
		count++;
	}
	
	public virtual void Warning (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
	}
	
	public virtual void Warning(string s) {
		errorStream.WriteLine(s);
	}
} // Errors


public class FatalError: Exception {
	public FatalError(string m): base(m) {}
}
}